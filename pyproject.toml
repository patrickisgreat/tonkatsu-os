[tool.poetry]
name = "tonkatsu-os"
version = "0.2.0"
description = "AI-powered Raman spectroscopy molecular identification platform"
authors = ["Patrick <patrick@tonkatsu-os.com>"]
readme = "README_NEW.md"
homepage = "https://github.com/patrickisgreat/tonkatsu-os"
repository = "https://github.com/patrickisgreat/tonkatsu-os"
documentation = "https://tonkatsu-os.readthedocs.io"
keywords = ["raman", "spectroscopy", "machine-learning", "molecular-identification", "diy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "tonkatsu_os", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
numpy = "^1.21.0"
scipy = "^1.7.0"
matplotlib = "^3.5.0"
pandas = "^1.3.0"
scikit-learn = "^1.0.0"
pybaselines = "^1.0.0"
pyserial = "^3.5"
streamlit = "^1.25.0"
plotly = "^5.0.0"
requests = "^2.25.0"
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
python-multipart = "^0.0.6"
psutil = "^5.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
jupyter = "^1.0.0"
ipykernel = "^6.0.0"

[tool.poetry.group.ml.dependencies]
# Optional ML dependencies for advanced features
tensorflow = {version = "^2.8.0", optional = true}
torch = {version = "^1.11.0", optional = true}
xgboost = {version = "^1.6.0", optional = true}

[tool.poetry.group.docs.dependencies]
sphinx = "^5.0.0"
sphinx-rtd-theme = "^1.0.0"
myst-parser = "^0.18.0"

[tool.poetry.extras]
ml = ["tensorflow", "torch", "xgboost"]
all = ["tensorflow", "torch", "xgboost"]

[tool.poetry.scripts]
tonkatsu = "tonkatsu_os.cli:main"
tonkatsu-web = "tonkatsu_os.app:run_app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["tonkatsu_os"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=tonkatsu_os --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pybaselines.*",
    "pyserial.*",
    "streamlit.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/tonkatsu_os"]
omit = [
    "tests/*",
    "src/tonkatsu_os/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]